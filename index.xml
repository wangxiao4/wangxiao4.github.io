<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Xiao4 800K</title>
    <link>http://www.wangxiao4.xyz/</link>
    <description>Recent content on Xiao4 800K</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <copyright>版权所有©2019–2021，Xiao4 800K；保留所有权利。</copyright>
    <lastBuildDate>Tue, 26 Jan 2021 00:00:00 +0000</lastBuildDate><atom:link href="http://www.wangxiao4.xyz/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>云服务器云空间那点事</title>
      <link>http://www.wangxiao4.xyz/blog/cloudspace/</link>
      <pubDate>Tue, 26 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>http://www.wangxiao4.xyz/blog/cloudspace/</guid>
      <description>免费的服务器到底能不能用 目前市面上的免费服务器有很多，无论大厂小厂还是黑心作坊几乎都会推出一些免费的服务器 用于增加自己的客户量，抢占市场。 而多数小厂在没有知名度的情况下要么各种投放广告，要么就是降低用户投入成本，从而占有一席之地
目前来说也不能绝对否决小厂的服务器不好，的确我也碰到了一些还不错的厂商，接下来我就盘点一下我玩过的服务器
  八点云 推过一款云空间是免费的，关键是它还支持.net4.5，对于我这个.net方向来说那真是极好的 其他的感觉还不错，需要实名认证，但是需要备案，对于测试来说，还算够用了
  彩虹云 有一款美国免费空间，环境仅PHP/MySQL，并且月流量20G ，这是一个重点，它限流的 但是作为美国空间，当然也就无需备案喽
  三丰云 一款曾经给我无限遐想的厂商，超大的带宽超便宜的价格，而且还是北方线路， 免费主机算是推广续命版，月流量和数据库都很小，至少.vip和.xyz域名无法绑定，需要备案 还有坑爹的终身套餐，网评不太好，体验后总体来说有点弱，并没有官网描述的那么好
  我比较看重以下几点  各项参数，如空间大小，数据库大小，带宽等 空间地址，国外和香港地区，免备案会方便一点 续命周期和方式，不需要你发广告的已经算良心商家了，我见过最烦的一款是阿贝云的有多烦自己体验吧 稳定性，通常免费的空间都是用来测试，所以能找到一款相对稳定的算不错了  当然还有很多其他的厂商，大多是坑，如果有不错的请留言给我 相对来说，一分钱一分货，想好要一点的体验当然还是需要花一点钱
再来看几款相对来说性价比不错的云服务器   优刻得 用过一年的香港服务器，总体讲，首购入门版，做玩具很划算，有的时候远程桌面可能上不去 网络不稳定或调整的时候会给你发提示邮件，续费……真贵啊
  奇异互动 这一款我看了很久，因为想要做私服，所以特意看了这边的裸机和服务器，由于自身原因并没有过多体验 不过看一下价格 这带宽，这性能，这价格感觉可以后期尝试一下
  群英 老牌厂商，用了他家的高防大带宽服务器近一年的时间，对我而言感觉感觉相当不错了 虽然官方客服有时候让人很恼火，问问题可能要等很久才会回复你，或者索性就不回复了 但是管家这边还是很靠谱的，由于我买错服务器，在没有催的情况下大概半个月退了款 如果你需要开放WEB需要备案，就连IP访问也不行，不备案服务器再好你也玩不起来
  大厂 百度 腾讯 阿里云 华为云 这几个大厂都有自己活动，而且总会有几款入门的供你玩，也是相当不错的选择 而且新用户 大多有免费一个月半年的那种服务器，超值
  virmach 一款以便宜著称的厂商，网上会有各种优惠卷，各种教程，通常大家都是用它来科学上网的 用过一段时间，被墙了，想体验的可以试一下，很便宜
  国外大厂 谷歌 亚马逊 微软云 大多需要绑卡的，如果你有双币卡，就去试一试，应该不会太差 反正我是没有-_-</description>
    </item>
    
    <item>
      <title>关于《Go语言学习笔记》这本书</title>
      <link>http://www.wangxiao4.xyz/blog/gonote/</link>
      <pubDate>Mon, 25 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>http://www.wangxiao4.xyz/blog/gonote/</guid>
      <description>#关于《Go语言学习笔记》这本书
书如其名，真的算是一本笔记，书中大量篇幅都是代码块，文字介绍较少，基础理论内容也很少， 更多的是对某一些特性和一些用法上做实践，并且如果你细读的话也会发现一些写错的地方。 如果非要嗑这本书 建议先看一遍**《Go by Example 中文版》**，对基本使用和语法有一定了解后再嗑 笔者下卷部分并没有继续看，因为感觉还不到看源码的时候，所以再深造一段时间在回来看一下。 这里粗略的整理一下知识点，没时间看这本书，可以看一下笔者整理的部分，并不全，也只是针对笔者感兴趣的地方进行了整理   defer 延迟操作 无论函数是否发生异常 都会在return后执行 类型别名写法 type myInt = int 类型定义写法 type myInt int 注：类型定义与原始类型无关且不会继承原类型方法 需要强转后才能相互操作 不能前置自增 ++a 不能将自增作为表达式 if(a++)&amp;gt;0 const 常量不能使用取址操作 const a int -&amp;gt; &amp;amp;a 指针指向同一个地址 或者 都为 nil 两个指针相等 当给复合类型赋值时 需要遵守以下规则  必须带有类型名称 var a struct=struct{} {必须紧跟类型后 且在一行 值以 , 隔开 多行情况 尾值以, 或者} 结尾   使用 for range 的时候 for域内将会使用复制后的目标数据，for域内对目标数据操作 不会影响下一次取值，但会影响for域外的目标数据 使用 for range 后的参数如果是方法 那么该方法也只会获取一次 break continue 也可以像 goto 一样增加跳转位置 函数 不支持方法重载，不支持默认参数 ，支持多返回（这点很有意思） 函数采用值拷贝 包括指针类型也是 返回值命名后可以在方法体中当变量使用 最后直接return 无需带返回值 很方便 延迟调用 包括注册和调用，并增加额外的缓存开销，所以性能较直接调用偏低一点 panic和recover是 内置函数 类似于try catch 操作 panic 引发一个错误 recover读取最后一个错误。recover只能在延迟函数 defer 中使用 可以将string看作是byte数组，两者引用地址是相同的，string为只读类型，所以其操作大多需要重新分配内存地址，当有大量使用追加操作，损耗因能严重，并产生相当多的垃圾，建议使用strings.</description>
    </item>
    
    <item>
      <title>Createblog</title>
      <link>http://www.wangxiao4.xyz/blog/createblog/</link>
      <pubDate>Wed, 20 Jan 2021 15:59:43 +0800</pubDate>
      
      <guid>http://www.wangxiao4.xyz/blog/createblog/</guid>
      <description></description>
    </item>
    
    <item>
      <title>关于我</title>
      <link>http://www.wangxiao4.xyz/about/</link>
      <pubDate>Wed, 20 Jan 2021 15:49:18 +0800</pubDate>
      
      <guid>http://www.wangxiao4.xyz/about/</guid>
      <description></description>
    </item>
    
    <item>
      <title>发邮件给我</title>
      <link>http://www.wangxiao4.xyz/contact/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://www.wangxiao4.xyz/contact/</guid>
      <description>发送</description>
    </item>
    
  </channel>
</rss>
