<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>入门 on Xiao4 800K</title>
    <link>http://www.wangxiao4.xyz/tags/%E5%85%A5%E9%97%A8/</link>
    <description>Recent content in 入门 on Xiao4 800K</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <copyright>版权所有©2019–2021，Xiao4 800K；保留所有权利。</copyright>
    <lastBuildDate>Thu, 04 Mar 2021 15:23:51 +0800</lastBuildDate><atom:link href="http://www.wangxiao4.xyz/tags/%E5%85%A5%E9%97%A8/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Docker玩法 - 项目发布之旅</title>
      <link>http://www.wangxiao4.xyz/blog/docker_push/</link>
      <pubDate>Thu, 04 Mar 2021 15:23:51 +0800</pubDate>
      
      <guid>http://www.wangxiao4.xyz/blog/docker_push/</guid>
      <description>Docker玩法 — 项目发布之旅 通过前文可以对docker有个了解，并运行一些自己喜欢的东西了，那这么有趣的玩具，我们必须加一点自己料近去。 但是在玩之前，需要知道一个东西，那就是dockerfile文件，这个文件是用来生成docker镜像用的，通过修改其中的命令 我们就可以把我们自己的料加镜像之中。接下来我们将围绕这个文件开始我们的旅程，那么扬帆启航了。
准备 在旅行之前我们肯定需要准备行囊，那么我这次将准备了一个Go服务 和 一个.net core 服务，两个都是非常简单的webapi服务
第一站，dockerfile 在dockerfile中，所有的命令都需要大写，常用命令如下
1. FROM 宿主环境，也就是代码运行的环境，Go项目就是Gloang，C#项目就是aspnet 2. MAINTAINER 个人信息，比如名字或邮箱 3. WORKDIR 是镜像内的工作目录 4. ADD 追加本地内容到指定镜像目录 第一个参数是本地路径，第二个是镜像目录 5. COPY 同上但不会自动解压缩包，不能访问网络 6. RUN 构建镜像时执行命令 7. EXPOSE 暴露容器端口 可以是一个 也可以是多个 8. CMD 构建镜像完毕后执行命令  接下来给出 go 服务的dockerfile 文件格式
FROM golang:latest MAINTAINER xiao4_800k &amp;lt;840076909@qq.com&amp;gt; WORKDIR /go/src/dockertest ADD dockertest/ /go/src/dockertest RUN go build -o . EXPOSE 80 CMD [&amp;quot;./dockertest&amp;quot;]  那么我们对照着说一下用到的这些命令
FROM 指定了宿主环境为golang MAINTAINER 写入了作者的个人信息 WORKDIR 指定工作目录，这里由于go的特性写的这个路径，根据需求有所差异 ADD 我将本地dockertest目录内容追加到src中 RUN go语言执行编译 EXPOSE 服务暴漏端口 80 CMD 执行服务  第二站，编译镜像 找到dockerfile所在文件夹 执行命令 docker build -t gotest .</description>
    </item>
    
    <item>
      <title>Docker玩法 - 这么好玩的东西你有必要玩一下</title>
      <link>http://www.wangxiao4.xyz/blog/dockerplay/</link>
      <pubDate>Thu, 04 Mar 2021 11:48:44 +0800</pubDate>
      
      <guid>http://www.wangxiao4.xyz/blog/dockerplay/</guid>
      <description>Docker玩法 — 小试牛刀 玩转第零步，Docker is Who 众所周知，在服务发部后需要部署到服务器上，而最常见服务器系统有 windows 和 Linux 两大阵营，根据服务的需求选择合适的服务器 而在我们发部到服务器之前需要对服务进行测试，为了确保能在生产环境中达到预期效果，我们需要先在测试环境中运行一段时间，观测结果 当服务通过各种测时候，就可以顺利的部署到生产服务器中。
但是我们在种情况下，不免会有人为的错误产生，为了避免这种情况我们就可以使用docker技术将服务打包运行，这样服务无论在什么环境都可以达到预期的效果 当然docker还具有更多的有点，比如在虚拟机方面，比较直接的方法是使VMware，但缺点很明显，它属于系统级的，需要安装配置，并占用较多的资源， 而是用docker则可以非常方便的初始化一个虚拟环境，且占用资源更少，因为它可以做到更细的单元，比如tomcat环境，管理更加方便 而目前大热的分布式服务和微服务等docker都能发挥很大的作用，你可以在一台机器上建立N个docker，并且每个docker都是独立互补干扰。 总之，docker是开发与维护过程中非常优秀工具
玩转第一步，请打开百度 如果你看到这里，想必已经对docker有了一点兴趣，那么我们就快速的把它玩起来，打开百度先搜索docker，找到docker的下载地址
点击这里跳转
选择自己的安装版本，我使用的是window和Linux两个版本，所以后面博文也是以这两个版本做测试，使用上可能会有些许不同，不过并不重要
window 一路安装就好，可能会碰到一些问题，比如Hyper-v报错，通常是因因为使用了家庭版window系统导致的，可以按照其他博文对系统进行修改 安装完后启动docker，可能稍稍有点慢，稍稍等待一下，当docker完全启动后会弹出提示，并且图标上那条鲸鱼会出现很多集装箱。
因为docker默认会安装在C盘，并且后续资源也会存放在C盘，对于C盘容量堪忧的朋友可以在docker设置中进行修改。
而Linux 安装起来相对来说问题更少
1. yum -y install docker 命令安装 2. systemctl start docker 启动docker 3. systemctl status docker 查看docker运行状况  这样 docker 我们就已经 安装并运行 了。
玩转第二步，命令要记住 使用docker，更多的是使用命令，常用的命令多打几遍也就顺手了，万年不变的 hello world 开个头
1. docker pull hello-world 拉取hello world镜像  2. docker images 查看镜像  3.docker run hello-world 运行镜像  4.</description>
    </item>
    
  </channel>
</rss>
