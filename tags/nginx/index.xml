<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nginx on Xiao4 800K</title>
    <link>http://www.wangxiao4.xyz/tags/nginx/</link>
    <description>Recent content in Nginx on Xiao4 800K</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <copyright>版权所有©2019–2021，Xiao4 800K；保留所有权利。</copyright>
    <lastBuildDate>Thu, 25 Feb 2021 17:06:46 +0800</lastBuildDate><atom:link href="http://www.wangxiao4.xyz/tags/nginx/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Nginx玩法 — 负载均衡</title>
      <link>http://www.wangxiao4.xyz/blog/nginx_loadbalance/</link>
      <pubDate>Thu, 25 Feb 2021 17:06:46 +0800</pubDate>
      
      <guid>http://www.wangxiao4.xyz/blog/nginx_loadbalance/</guid>
      <description>Nginx玩法 — 负载均衡 首先我们需要弄清楚负载均衡的含义，负载均衡是通过算法实现平均分配的策略，将数据交互平均分担到集群中的各个服务中，从而提高整体对外服务的可用性，健壮性和性能等。
负载均衡是Nginx中较为重要的功能，常用于站点级的负载策略之中，相对于使用专属硬件做负载，拥有维护方便，成本低等特点，所以在日常系统中Nginx做负载也是不错的选择。
举个例子 川菜馆里的多个厨子，为了能够快速响应客户的点餐吃饭的需求，通常需要多个厨子完成不同的菜品， 节省上菜的时间，一但一个厨师请了假，也不会有太大影响，因为有其他厨师顶替他的位置继续服务客户。 这在川菜馆就相当于负载均衡服务器，每个厨师是一个单独的服务  那么在Nginx中如何使用那？ 代码如下
upstream backend{ server http://127.0.0.1:8080/; server http://127.0.0.1:8081/; server http://127.0.0.1:8082/; } server{ listen 80; server_name localhost; location / { proxy_pass backend; } }  将代码写入nginx.conf的http代码块中，nginx -s reload 一下，刷新界面看看效果
主要命令包括
1. proxy_pass 用于指定服务组 2. upstream 用于定义服务组 3. listen 监听端口 4. server_name 指定服务名称 5. location 定义不同请求的处理  通过以上命令我们就可以快速搭建一个基于Nginx的负载均衡服务器，但是在我们使用中还需要注意到其他的问题 比如我们后端具有身份验证，那么我们轮询backend组中的服务就会出现问题，因为用户在其中一台中存放了身份信息，所以其他服务认为这是非法的操作。再比如每一台服务器都不一样，有的服务配置较高，有的较低，如果使用相同的访问量，必定对配置较低的服务器产生较大压力从而影响到数据的响应或直接宕机瘫痪，那么我们该如何避免这些问题那？接下来我们就看一下Nginx为我们提供的几个命令。
# weight = value 权重模式,权重越高，被访问到的几率越大 upstream backend1{ server http://127.0.0.1:8080/ weight=1; server http://127.0.0.1:8081/ weight=2; server http://127.</description>
    </item>
    
    <item>
      <title>Nginx玩法 — 反向代理</title>
      <link>http://www.wangxiao4.xyz/blog/reverseproxy/</link>
      <pubDate>Thu, 25 Feb 2021 14:27:56 +0800</pubDate>
      
      <guid>http://www.wangxiao4.xyz/blog/reverseproxy/</guid>
      <description>Nginx玩法 — 反向代理 Nginx的反向代理是一块比较常用且重要的功能，查看一下关于反向代理的指令，你就体会到有多重要了，否则也不会给出20+的指令，翻看一下在上一篇正向代理用到的指令，一个手的就能数的完了。
那么在开始愉快玩耍之前还是要先搞清楚，这个反向代理到底是什么意思。
举个例子  有这么一天，狐朋带着狗友，去市区中心吃饭，由于这地段只有这一家川菜馆，所以生意火爆,川菜馆事先将常见的菜品都准备好， 但是依然无法满足需求量，川菜馆就雇佣了多个大厨，这些大厨手艺有高有低，其中有一个大厨外号“盐不要钱”，恰好给狐朋狗友做菜的就是他， 狐朋狗友吃了这菜后，差点没过去，如果不是餐馆经理拦着估计就是给“盐不要钱”一顿好果子，最终餐厅辞退了“盐不要钱”， 狐朋狗友将剩菜剩饭打包后带走  我们可以将狐朋和狗友看作是客户端，川菜馆看作是反向代理服务器，厨子们是最终的服务器，可以简单看作反向代理包含着最终服务器
特点 由上述例子可以看出反向代理的几个特点
1. 具有加速访问的功能（事先准备好常见的菜品） 2. 对客户端隐藏了真正的服务端（客户并不知道，哪个大厨做的） 3. 对服务器具有保护作用（餐厅工作人员屏蔽掉了狐朋狗友想打厨子的请求） 4. 具有信息增强和筛选的功能（将不同的菜品分给凉菜师傅和热菜师傅，口味还要看师傅心情）  使用 简单的Hello World，将代码嵌入到 http 代码块中即可。
server{ listen 80; server_name localhost; location / { porxy_pass http://127.0.0.1:8080; } }  我们看一下这几个参数：
1. listen 代理监听的端口号，根据自己的情况编写即可 2. server_name 服务名称用于匹配请求，也可以写成自定义的域名，但需要额外的映射配置 3. location 监听全部请求，根据需求追加修改规则 4. proxy_pass 配置被代理地址可以是ip也可以是主机名称，还可以是upstream(后续说到)  这样我们一个基础的反向代理就搭建完成了，nginx -s reload 重新加载配置后，试着跑一下
这样我就看到了代理的 tomcat ，再查看一下我们的日志
扩充 接下来我们再看一下反向代理常用的一些指令
 proxy_pass upstream 通常我们会开启多个服务提高系统的可用性，在nginx中通过定义upstream将多个服务划分为一个组供代理使用，同时还可以设置模式，常见有顺序模式，权重模式和哈希模式，就是再原有基础上增加参数即可具体可参考其他博文的写法 信息头和信息主体的指令， .</description>
    </item>
    
    <item>
      <title>Nginx玩法 — 正向代理</title>
      <link>http://www.wangxiao4.xyz/blog/nginx_proxy/</link>
      <pubDate>Tue, 23 Feb 2021 17:19:13 +0800</pubDate>
      
      <guid>http://www.wangxiao4.xyz/blog/nginx_proxy/</guid>
      <description>Nginx玩法 — 正向代理 正向代理
你请求代理帮你完成某件事情，代理将办理结果通知回你，类似于fan个qiang，访问谷歌，或者VPN。
举个例子比如：
你去商店买了一瓶水，店员直接卖给你一瓶，这中间没有任何其他参与者，你和店员之间就相当于没有代理  相反
如果你在打游戏，拜托你的朋友帮你买一瓶农夫山泉，朋友借此去市区见狐朋，到市区买了他最爱的运动耳机， 和狐朋吃了个饭并吐槽了一下要带水回去后，打包了剩菜剩饭，胡朋从河边灌了一瓶水，朋友带回来给你，最终你获得了一瓶水和晚饭。  这里可以将你看作客户端，狐朋狗友看作是代理，买一瓶农夫山泉是你的请求，狐朋狗友的一系列操作是数据传递和处理的过程
通过上面的例子，我们可以大概知道正向代理的几个特点
 1. 代理在客户端与终端之间 2. 对客户端屏蔽了终端的具体实现 （你不知道水是哪里买到的，也不知道最终是由谁完成的，你并不清楚是胡朋在河边灌的水） 3. 隐藏了客户端对终端的身份	（胡朋并不知道你的存在） 4. 可以帮你绕过限制达到最终目的（你在打游戏，无法自己去买水） 5. 具有信息过滤和加强的功能（朋友去除了你想要农夫山泉的数据，还给你带了晚饭） 6. 可以加速结果返回（如果朋友接收到要水的请求直接到厨房倒了一杯给你的话会节省很多时间）  使用 用到的属性有
1. resolver 这里可以根据自己的需求修改DNS 2. listen 配置监听的端口号 3. location 如果有个别路径需要特殊处理，可以适当增加规则 4. proxy_pass 这里通常时不变的  关键代码如下
server { resolver 8.8.8.8;	listen 80;	location / { proxy_pass http://$http_host$request_uri;	} }  将上述代码嵌入到 nginx.conf 的 http 代码块中即可
测试 可以使用火狐浏览器做测试，设置代理为Nginx的IP和端口
设置成功后访问网址都会在日志文件中有记录
Nginx常用命令 1. nginx -v	|	简洁版版本信息 2.</description>
    </item>
    
  </channel>
</rss>
